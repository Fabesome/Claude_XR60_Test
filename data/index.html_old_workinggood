<!DOCTYPE html>
<html>
<head>
    <title>XR60 Controller</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="data:,">
    <style>
        html {font-family: Arial; display: inline-block; text-align: center;}
        h1 {font-size: 2rem; color: white;}
        h2 {font-size: 1.5rem; color: white;}
        h3 {font-size: 1.2rem;}
        p {font-size: 1.2rem;}
        body {margin: 0;}
        .topnav {overflow: hidden; background-color: #4B1D3F; color: white; font-size: 1.7rem;}
        .content {padding: 20px;}
        .card {background-color: white; box-shadow: 2px 2px 12px 1px rgba(140,140,140,.5); padding: 10px;}
        .cards {max-width: 700px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));}
        .reading {font-size: 2.8rem;}
        .timestamp {color: #bebebe; font-size: 1rem; padding: 0; margin: 0;}
        .card-title {font-size: 1.2rem; font-weight: bold; color: #034078;}
        .card-container {display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%;}
        .button {background-color: #87919E; border: none; color: white; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer;}
        .button2 {background-color: #03AC13;}
        .setpoint-controls {display: flex; align-items: center; justify-content: center;}
        .setpoint-controls input {width: 60px; text-align: center; font-size: 1.2rem;}
        .setpoint-controls button {font-size: 1.5rem; padding: 5px 10px; margin: 0 5px;}
    </style>
</head>
<body>
    <div class="topnav">
        <h1>XR60 Web Server</h1>
    </div>
    <div class="content">
        <div class="cards">
            <div class="card">
                <h3>Temperature</h3>
                <p class="reading"><span id="temperature">--</span> &deg;C</p>
                <p class="timestamp">Last reading: <span id="timestamp">--</span></p>
            </div>
            <div class="card">
                <h3>Evaporator Temperature</h3>
                <p class="reading"><span id="evaporatorTemp">--</span> &deg;C</p>
            </div>
            <div class="card">
                <h3>Compressor</h3>
                <p class="reading"><span id="compressor">--</span></p>
            </div>
            <div class="card">
                <h3>Defrost</h3>
                <p class="reading"><span id="defrost">--</span></p>
            </div>
            <div class="card">
                <h3>Fan</h3>
                <p class="reading"><span id="fan">--</span></p>
            </div>
            <div class="card">
                <h3>Door</h3>
                <p class="reading"><span id="door">--</span></p>
            </div>
        </div>
        <br>
        <div class="card">
            <h3>Setpoint Control</h3>
            <div class="setpoint-controls">
                <button id="decreaseSetpoint">-</button>
                <input type="number" id="setpoint" min="-50" max="150" step="0.1">
                <button id="increaseSetpoint">+</button>
            </div>
            <button id="updateSetpoint" class="button">Update Setpoint</button>
        </div>
        <br>
        <h3>Sensor Control</h3>
        <p>Click to toggle between BME280 and NTC sensors:</p>
        <p><button id="toggleSensor" class="button">Toggle Sensor</button></p>
        <br>
        <h3>Temperature Simulation</h3>
        <p>Enter a temperature value to simulate:</p>
        <p>
            <input type="number" id="simulatedTemp" min="-50" max="150" step="0.1">
            <button id="setSimulatedTemp" class="button button2">Set Temperature</button>
        </p>
    </div>
    <script>
        let updateInProgress = false;
        let lastReceivedData = null;
        
        function showUpdateIndicator() {
            const indicator = document.createElement('div');
            indicator.id = 'updateIndicator';
            indicator.style.position = 'fixed';
            indicator.style.top = '10px';
            indicator.style.right = '10px';
            indicator.style.background = 'yellow';
            indicator.style.padding = '5px';
            indicator.textContent = 'Updating...';
            document.body.appendChild(indicator);
        }
        
        function hideUpdateIndicator() {
            const indicator = document.getElementById('updateIndicator');
            if (indicator) {
                indicator.remove();
            }
        }

        function isValidTemperature(temp) {
            return typeof temp === 'number' && !isNaN(temp) && isFinite(temp) && temp > -273.15 && temp < 1000;
        }

        async function updateData() {
            if (updateInProgress) return;
            updateInProgress = true;
            showUpdateIndicator();

            const clientRequestTime = new Date().toISOString();

            try {
                const [dataResponse, settingsResponse] = await Promise.all([
                    fetch('/data?timestamp=' + clientRequestTime),
                    fetch('/get_settings?timestamp=' + clientRequestTime)
                ]);

                const clientReceiveTime = new Date().toISOString();

                const data = await dataResponse.json();
                const settings = await settingsResponse.json();

                console.log(`Client request time: ${clientRequestTime}`);
                console.log(`Client receive time: ${clientReceiveTime}`);
                console.log('Received data:', JSON.stringify(data, null, 2));
                console.log('Received settings:', JSON.stringify(settings, null, 2));

                if (data) {
                    const { temp, compressor, defrost, fan, time, date } = data;
                    
                    // Check if data has changed
                    if (JSON.stringify(data) !== JSON.stringify(lastReceivedData)) {
                        console.log('Data has changed');
                        lastReceivedData = data;
                    } else {
                        console.log('Data has not changed');
                    }

                    document.getElementById('temperature').textContent = isValidTemperature(temp) ? temp.toFixed(1) : 'Error';
                    document.getElementById('compressor').textContent = compressor ? 'ON' : 'OFF';
                    document.getElementById('defrost').textContent = defrost ? 'ON' : 'OFF';
                    document.getElementById('fan').textContent = fan ? 'ON' : 'OFF';
                    
                    // Update timestamp
                    const formattedTimestamp = `${date} ${time}`;
                    document.getElementById('timestamp').textContent = formattedTimestamp;
                    
                    console.log('Formatted timestamp:', formattedTimestamp);
                    console.log('Raw date:', date, 'Raw time:', time);

                    // Handle evaporator temperature if available
                    if ('evap_temp' in data) {
                        document.getElementById('evaporatorTemp').textContent = isValidTemperature(data.evap_temp) ? data.evap_temp.toFixed(1) : 'N/A';
                    } else {
                        document.getElementById('evaporatorTemp').textContent = 'N/A';
                    }

                    // Handle door state if available
                    if ('door' in data) {
                        document.getElementById('door').textContent = data.door ? 'OPEN' : 'CLOSED';
                    } else {
                        document.getElementById('door').textContent = 'N/A';
                    }
                } else {
                    console.error('Invalid data format received');
                }

                if (settings && typeof settings.SEt === 'number') {
                    document.getElementById('setpoint').value = settings.SEt.toFixed(1);
                } else {
                    console.error('Invalid settings format received');
                }
            } catch (error) {
                console.error('Error updating data:', error);
            } finally {
                updateInProgress = false;
                hideUpdateIndicator();
            }
        }

        document.getElementById('toggleSensor').addEventListener('click', async function() {
            try {
                const response = await fetch('/toggle_sensor', { method: 'POST' });
                const result = await response.text();
                alert(result);
                updateData();
            } catch (error) {
                console.error('Error toggling sensor:', error);
            }
        });
        
        document.getElementById('setSimulatedTemp').addEventListener('click', async function() {
            const temp = document.getElementById('simulatedTemp').value;
            try {
                const response = await fetch('/simulate_temperature', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ temperature: parseFloat(temp) }),
                });
                const result = await response.json();
                if (result.status === 'success') {
                    alert('Temperature simulation set successfully');
                    updateData();
                } else {
                    alert('Failed to set simulated temperature');
                }
            } catch (error) {
                console.error('Error setting simulated temperature:', error);
            }
        });
        
        document.getElementById('decreaseSetpoint').addEventListener('click', function() {
            let setpoint = parseFloat(document.getElementById('setpoint').value);
            document.getElementById('setpoint').value = (setpoint - 0.1).toFixed(1);
        });
        
        document.getElementById('increaseSetpoint').addEventListener('click', function() {
            let setpoint = parseFloat(document.getElementById('setpoint').value);
            document.getElementById('setpoint').value = (setpoint + 0.1).toFixed(1);
        });
        
        document.getElementById('updateSetpoint').addEventListener('click', async function() {
            const setpoint = parseFloat(document.getElementById('setpoint').value);
            try {
                const response = await fetch('/update_settings', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ SEt: setpoint }),
                });
                const result = await response.json();
                if (result.status === 'success') {
                    alert('Setpoint updated successfully');
                    updateData();
                } else {
                    alert('Failed to update setpoint');
                }
            } catch (error) {
                console.error('Error updating setpoint:', error);
            }
        });
        
        // Add a manual refresh button
        document.body.insertAdjacentHTML('beforeend', '<button id="manualRefresh" style="position: fixed; bottom: 10px; right: 10px;">Refresh Data</button>');
        document.getElementById('manualRefresh').addEventListener('click', updateData);

        // Update data every 5 seconds
        setInterval(updateData, 5000);

        // Initial update
        updateData();
    </script>
</body>
</html>