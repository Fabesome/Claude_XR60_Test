<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESP32 Refrigeration Controller</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.0/dist/chartjs-adapter-moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@1.2.1"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            padding: 20px;
            max-width: 1000px;
            margin: 0 auto;
        }

        h1,
        h2 {
            color: #333;
        }

        .section {
            background: #f4f4f4;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 5px;
        }

        #temperatureChart {
            width: 100%;
            height: 400px;
        }

        .chart-container {
            position: relative;
        }

        .chart-controls {
            margin-top: 10px;
        }

        button {
            margin-right: 10px;
        }

        .alert {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            display: none;
        }

        .alert-danger {
            background-color: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
    </style>
</head>

<body>
    <h1>ESP32 Refrigeration Controller</h1>

    <div id="highTempAlert" class="alert alert-danger">
        Warning: High Temperature Detected!
    </div>
    <div id="lowTempAlert" class="alert alert-danger">
        Warning: Low Temperature Detected!
    </div>

    <div class="section">
        <h2>Temperature Chart</h2>
        <div class="chart-container">
            <canvas id="temperatureChart"></canvas>
        </div>
        <div class="chart-controls">
            <button onclick="updateChartRange('1h')">Last Hour</button>
            <button onclick="updateChartRange('6h')">Last 6 Hours</button>
            <button onclick="updateChartRange('24h')">Last 24 Hours</button>
            <button onclick="resetZoom()">Reset Zoom</button>
        </div>
    </div>

    <div class="section">
        <h2>Temperature Simulation</h2>
        <div>
            <input type="range" id="tempSimulator" min="-50" max="50" step="0.1" value="20">
            <input type="number" id="tempSimulatorInput" min="-50" max="50" step="0.1" value="20">
            <span id="tempSimulatorUnit">°C</span>
        </div>
        <p>Simulated Temperature: <span id="tempSimulatorValue">20.0°C</span></p>
    </div>

    <div class="section">
        <h2>System Status</h2>
        <p>Current Temperature: <span id="currentTemp"></span>°C</p>
        <p>Compressor: <span id="compressorStatus"></span></p>
        <p>Defrost: <span id="defrostStatus"></span></p>
        <p>Fan: <span id="fanStatus"></span></p>
        <p>Door: <span id="doorStatus"></span></p>
    </div>

    <div class="section">
        <h2>Settings</h2>
        <form id="settingsForm">
            <div>
                <label for="SEt">Set Point (°C):</label>
                <input type="number" id="SEt" name="SEt" step="0.1">
            </div>
            <div>
                <label for="Hy">Differential (°C):</label>
                <input type="number" id="Hy" name="Hy" step="0.1">
            </div>
            <div>
                <label for="LS">Minimum Set Point (°C):</label>
                <input type="number" id="LS" name="LS" step="0.1">
            </div>
            <div>
                <label for="US">Maximum Set Point (°C):</label>
                <input type="number" id="US" name="US" step="0.1">
            </div>
            <div>
                <label for="Ot">Thermostat Probe Calibration (°C):</label>
                <input type="number" id="Ot" name="Ot" step="0.1">
            </div>
            <div>
                <label for="P2P">Evaporator Probe Presence:</label>
                <select id="P2P" name="P2P">
                    <option value="n">No</option>
                    <option value="y">Yes</option>
                </select>
            </div>
            <div>
                <label for="OE">Evaporator Probe Calibration (°C):</label>
                <input type="number" id="OE" name="OE" step="0.1">
            </div>
            <div>
                <label for="OdS">Outputs Activation Delay at Start Up (min):</label>
                <input type="number" id="OdS" name="OdS">
            </div>
            <div>
                <label for="AC">Anti-short Cycle Delay (min):</label>
                <input type="number" id="AC" name="AC">
            </div>
            <div>
                <label for="CCt">Continuous Cycle Duration (hours):</label>
                <input type="number" id="CCt" name="CCt" step="0.1">
            </div>
            <div>
                <label for="CCS">Set Point for Continuous Cycle (°C):</label>
                <input type="number" id="CCS" name="CCS" step="0.1">
            </div>
            <div>
                <label for="COn">Compressor ON Time with Faulty Probe (min):</label>
                <input type="number" id="COn" name="COn">
            </div>
            <div>
                <label for="COF">Compressor OFF Time with Faulty Probe (min):</label>
                <input type="number" id="COF" name="COF">
            </div>
            <div>
                <label for="CF">Temperature Measurement Unit:</label>
                <select id="CF" name="CF">
                    <option value="C">Celsius</option>
                    <option value="F">Fahrenheit</option>
                </select>
            </div>
            <div>
                <label for="rES">Resolution:</label>
                <select id="rES" name="rES">
                    <option value="dE">Decimal</option>
                    <option value="in">Integer</option>
                </select>
            </div>
            <div>
                <label for="Lod">Probe Displayed:</label>
                <select id="Lod" name="Lod">
                    <option value="P1">P1</option>
                    <option value="P2">P2</option>
                    <option value="P3">P3</option>
                    <option value="P4">P4</option>
                    <option value="Set">Set</option>
                    <option value="dtr">dtr</option>
                </select>
            </div>
            <div>
                <label for="tdF">Defrost Type:</label>
                <select id="tdF" name="tdF">
                    <option value="EL">Electric</option>
                    <option value="in">Hot Gas</option>
                </select>
            </div>
            <div>
                <label for="dFP">Probe Selection for Defrost Termination:</label>
                <select id="dFP" name="dFP">
                    <option value="nP">Not Present</option>
                    <option value="P1">P1</option>
                    <option value="P2">P2</option>
                    <option value="P3">P3</option>
                    <option value="P4">P4</option>
                </select>
            </div>
            <div>
                <label for="dtE">Defrost Termination Temperature (°C):</label>
                <input type="number" id="dtE" name="dtE" step="0.1">
            </div>
            <div>
                <label for="IdF">Interval Between Defrost Cycles (hours):</label>
                <input type="number" id="IdF" name="IdF">
            </div>
            <div>
                <label for="MdF">Maximum Duration of Defrost (min):</label>
                <input type="number" id="MdF" name="MdF">
            </div>
            <div>
                <label for="dSd">Start Defrost Delay (min):</label>
                <input type="number" id="dSd" name="dSd">
            </div>
            <div>
                <label for="dFd">Display During Defrost:</label>
                <select id="dFd" name="dFd">
                    <option value="rt">Real Temperature</option>
                    <option value="it">Temperature at Defrost Start</option>
                    <option value="SEt">Set Point</option>
                    <option value="dEF">dEF Label</option>
                </select>
            </div>
            <div>
                <label for="dAd">MAX Display Delay After Defrost (min):</label>
                <input type="number" id="dAd" name="dAd">
            </div>
            <div>
                <label for="Fdt">Draining Time (min):</label>
                <input type="number" id="Fdt" name="Fdt">
            </div>
            <div>
                <label for="dPo">First Defrost After Start-up:</label>
                <select id="dPo" name="dPo">
                    <option value="n">No</option>
                    <option value="y">Yes</option>
                </select>
            </div>
            <div>
                <label for="dAF">Defrost Delay After Continuous Cycle (hours):</label>
                <input type="number" id="dAF" name="dAF" step="0.1">
            </div>
            <div>
                <label for="FnC">Fan Operating Mode:</label>
                <select id="FnC" name="FnC">
                    <option value="C_n">With compressor, OFF in defrost</option>
                    <option value="o_n">Continuous mode, OFF in defrost</option>
                    <option value="C_Y">With compressor, ON in defrost</option>
                    <option value="o_Y">Continuous mode, ON in defrost</option>
                </select>
            </div>
            <div>
                <label for="Fnd">Fan Delay After Defrost (min):</label>
                <input type="number" id="Fnd" name="Fnd">
            </div>
            <div>
                <label for="Fct">Temperature Differential to Avoid Short Cycles of Fans (°C):</label>
                <input type="number" id="Fct" name="Fct" step="0.1">
            </div>
            <div>
                <label for="FSt">Fan Stop Temperature (°C):</label>
                <input type="number" id="FSt" name="FSt" step="0.1">
            </div>
            <div>
                <label for="FAP">Probe Selection for Fan Management:</label>
                <select id="FAP" name="FAP">
                    <option value="nP">Not Present</option>
                    <option value="P1">P1</option>
                    <option value="P2">P2</option>
                    <option value="P3">P3</option>
                    <option value="P4">P4</option>
                </select>
            </div>
            <div>
                <label for="ALC">Temperature Alarms Configuration:</label>
                <select id="ALC" name="ALC">
                    <option value="Ab">Absolute</option>
                    <option value="rE">Relative</option>
                </select>
            </div>
            <div>
                <label for="ALU">High Temperature Alarm Setting (°C):</label>
                <input type="number" id="ALU" name="ALU" step="0.1">
            </div>
            <div>
                <label for="ALL">Low Temperature Alarm Setting (°C):</label>
                <input type="number" id="ALL" name="ALL" step="0.1">
            </div>
            <div>
                <label for="AFH">Differential for Temperature Alarm Recovery (°C):</label>
                <input type="number" id="AFH" name="AFH" step="0.1">
            </div>
            <div>
                <label for="ALd">Temperature Alarm Delay (min):</label>
                <input type="number" id="ALd" name="ALd">
            </div>
            <div>
                <label for="dAO">Delay of Temperature Alarm at Start Up (hours):</label>
                <input type="number" id="dAO" name="dAO" step="0.1">
            </div>
        </form>
        <button onclick="updateSettings()">Update Settings</button>
    </div>

    <div class="section">
        <h2>Data Logging</h2>
        <button onclick="downloadLog()">Download Temperature Log</button>
    </div>

    <script>
        let chart;

        let chartData = {
            temperature: [],
            compressor: [],
            defrost: [],
            fan: [],
            door: []
        };

        document.addEventListener('DOMContentLoaded', function () {
            const ctx = document.getElementById('temperatureChart').getContext('2d');
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        yAxisID: 'y',
                    }, {
                        label: 'Compressor',
                        data: [],
                        borderColor: 'rgb(255, 99, 132)',
                        stepped: true,
                        yAxisID: 'y1',
                    }, {
                        label: 'Defrost',
                        data: [],
                        borderColor: 'rgb(255, 205, 86)',
                        stepped: true,
                        yAxisID: 'y1',
                    }, {
                        label: 'Fan',
                        data: [],
                        borderColor: 'rgb(54, 162, 235)',
                        stepped: true,
                        yAxisID: 'y1',
                    }, {
                        label: 'Door',
                        data: [],
                        borderColor: 'rgb(153, 102, 255)',
                        stepped: true,
                        yAxisID: 'y1',
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'minute',
                                displayFormats: {
                                    minute: 'HH:mm'
                                }
                            },
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Temperature (°C)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            min: 0,
                            max: 1,
                            title: {
                                display: true,
                                text: 'State'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        },
                    },
                    plugins: {
                        zoom: {
                            zoom: {
                                wheel: {
                                    enabled: true,
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'xy',
                            },
                            pan: {
                                enabled: true,
                                mode: 'xy',
                            },
                        }
                    }
                },
                plugins: [ChartZoom]


            });

            loadSettings();
            updateChartRange('1h');
            updateAlerts();
            updateSystemStatus();

            // Update every 60 seconds
            setInterval(() => {
                updateChart(chart.scales.x.min);
                updateAlerts();
                updateSystemStatus();
            }, 60000);

            // Call updateSystemStatus more frequently, e.g., every second
            setInterval(updateSystemStatus, 1000);

            // Update chart every 5 seconds
            setInterval(() => updateChart(chart.scales.x.min), 5000);

            // Temperature Simulation
            const tempSimulator = document.getElementById('tempSimulator');
            const tempSimulatorInput = document.getElementById('tempSimulatorInput');
            const tempSimulatorValue = document.getElementById('tempSimulatorValue');

            if (tempSimulator && tempSimulatorInput && tempSimulatorValue) {
                function updateSimulatedTemp(value) {
                    tempSimulator.value = value;
                    tempSimulatorInput.value = value;
                    tempSimulatorValue.textContent = `${parseFloat(value).toFixed(1)}°C`;
                    updateSimulatedTemperature(value);
                }

                tempSimulator.addEventListener('input', function () {
                    updateSimulatedTemp(this.value);
                });

                tempSimulatorInput.addEventListener('change', function () {
                    updateSimulatedTemp(this.value);
                });

                function updateSimulatedTemperature(temperature) {
                    console.log('Sending simulated temperature:', temperature);
                    fetch('/simulate_temperature', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ temperature: parseFloat(temperature) }),
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === 'success') {
                                console.log('Simulated temperature updated successfully');
                            } else {
                                console.error('Failed to update simulated temperature');
                            }
                        })
                        .catch(error => console.error('Error:', error));
                }
            } else {
                console.error('One or more temperature simulation elements are missing from the DOM');
            }
        });

        function updateChart(startTime = 0) {
            const endTime = Date.now();
            fetch(`/data?start=${startTime}&end=${endTime}`)
                .then(response => response.json())
                .then(data => {
                    if (data.data && data.data.length > 0) {
                        // Accumulate new data points
                        data.data.forEach(point => {
                            const time = new Date(point.time);
                            chartData.temperature.push({ x: time, y: point.temp });
                            chartData.compressor.push({ x: time, y: point.compressor ? 1 : 0 });
                            chartData.defrost.push({ x: time, y: point.defrost ? 1 : 0 });
                            chartData.fan.push({ x: time, y: point.fan ? 1 : 0 });
                            chartData.door.push({ x: time, y: point.door ? 1 : 0 });
                        });

                        // Remove data points older than 24 hours
                        const twentyFourHoursAgo = endTime - 24 * 60 * 60 * 1000;
                        chartData.temperature = chartData.temperature.filter(point => point.x > twentyFourHoursAgo);
                        chartData.compressor = chartData.compressor.filter(point => point.x > twentyFourHoursAgo);
                        chartData.defrost = chartData.defrost.filter(point => point.x > twentyFourHoursAgo);
                        chartData.fan = chartData.fan.filter(point => point.x > twentyFourHoursAgo);
                        chartData.door = chartData.door.filter(point => point.x > twentyFourHoursAgo);

                        // Update chart with accumulated data
                        chart.data.datasets[0].data = chartData.temperature;
                        chart.data.datasets[1].data = chartData.compressor;
                        chart.data.datasets[2].data = chartData.defrost;
                        chart.data.datasets[3].data = chartData.fan;
                        chart.data.datasets[4].data = chartData.door;

                        chart.update();

                        // Update system status with the latest data point
                        const latestData = data.data[data.data.length - 1];
                        document.getElementById('currentTemp').textContent = latestData.temp.toFixed(1);
                        document.getElementById('compressorStatus').textContent = latestData.compressor ? 'ON' : 'OFF';
                        document.getElementById('defrostStatus').textContent = latestData.defrost ? 'ON' : 'OFF';
                        document.getElementById('fanStatus').textContent = latestData.fan ? 'ON' : 'OFF';
                        document.getElementById('doorStatus').textContent = latestData.door ? 'OPEN' : 'CLOSED';
                    }
                })
                .catch(error => console.error('Error updating chart:', error));
        }

        function updateAlerts() {
            fetch('/alert_status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('highTempAlert').style.display = data.highTemp ? 'block' : 'none';
                    document.getElementById('lowTempAlert').style.display = data.lowTemp ? 'block' : 'none';
                })
                .catch(error => console.error('Error:', error));
        }

        function updateSystemStatus() {
            fetch('/data')
                .then(response => response.json())
                .then(data => {
                    if (data.data && data.data.length > 0) {
                        const latestData = data.data[0];
                        document.getElementById('currentTemp').textContent = latestData.temp.toFixed(1);
                        document.getElementById('compressorStatus').textContent = latestData.compressor ? 'ON' : 'OFF';
                        document.getElementById('defrostStatus').textContent = latestData.defrost ? 'ON' : 'OFF';
                        document.getElementById('fanStatus').textContent = latestData.fan ? 'ON' : 'OFF';
                        document.getElementById('doorStatus').textContent = latestData.door ? 'OPEN' : 'CLOSED';
                        console.log('System status updated:', latestData);
                    }
                })
                .catch(error => console.error('Error updating system status:', error));
        }

        function updateChartRange(range) {
            const now = Date.now();
            let startTime;
            switch (range) {
                case '1h':
                    startTime = now - 3600000;
                    break;
                case '6h':
                    startTime = now - 21600000;
                    break;
                case '24h':
                    startTime = now - 86400000;
                    break;
                default:
                    startTime = 0;
            }

            // Reset chart data
            chartData = {
                temperature: [],
                compressor: [],
                defrost: [],
                fan: [],
                door: []
            };

            updateChart(startTime);
        }

        function resetZoom() {
            chart.resetZoom();
        }

        function downloadLog() {
            window.location.href = '/download_log';
        }

        function loadSettings() {
            fetch('/get_settings')
                .then(response => response.json())
                .then(data => {
                    for (const [key, value] of Object.entries(data)) {
                        const element = document.getElementById(key);
                        if (element) {
                            element.value = value;
                        }
                    }
                })
                .catch(error => console.error('Error loading settings:', error));
        }

        function updateSettings() {
            const form = document.getElementById('settingsForm');
            const formData = new FormData(form);
            const settings = Object.fromEntries(formData.entries());

            fetch('/update_settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(settings),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        alert('Settings updated successfully');
                    } else {
                        alert('Failed to update settings');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating settings');
                });
        }

        document.getElementById('tempSimulator').addEventListener('input', function () {
            const value = this.value;
            document.getElementById('tempSimulatorValue').textContent = `${value}°C`;
            updateSimulatedTemperature(value);
        });

        function updateSimulatedTemperature(temperature) {
            console.log('Sending simulated temperature:', temperature);
            fetch('/simulate_temperature', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ temperature: parseFloat(temperature) }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        console.log('Simulated temperature updated successfully');
                    } else {
                        console.error('Failed to update simulated temperature');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>

</body>

</html>